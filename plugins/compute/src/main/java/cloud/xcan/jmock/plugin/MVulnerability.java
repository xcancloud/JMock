package cloud.xcan.jmock.plugin;

import static cloud.xcan.jmock.plugin.DocMessage.DOC_CATEGORY_COMPUTE;
import static cloud.xcan.jmock.plugin.DocMessage.DOC_VULNERABILITY_C1;
import static cloud.xcan.jmock.plugin.DocMessage.DOC_VULNERABILITY_DESC;
import static cloud.xcan.jmock.plugin.MBrowser.random;

import cloud.xcan.jmock.api.AbstractMockFunction;
import cloud.xcan.jmock.api.docs.annotation.JMockConstructor;
import cloud.xcan.jmock.api.docs.annotation.JMockFunctionRegister;
import java.util.Arrays;
import java.util.List;

@JMockFunctionRegister(descI18nKey = DOC_VULNERABILITY_DESC,
    categoryI18nKey = {DOC_CATEGORY_COMPUTE}, order = 5014)
public class MVulnerability extends AbstractMockFunction {

  public static final List<String> VULNERABILITY_TYPES = Arrays.asList(
      "SQL Injection", "Cross-Site Scripting (XSS)", "Cross-Site Request Forgery (CSRF)",
      "Remote Code Execution (RCE)", "Buffer Overflow", "Insecure Direct Object References",
      "Security Misconfiguration", "Sensitive Data Exposure", "Broken Authentication",
      "Server-Side Request Forgery (SSRF)", "XML External Entity (XXE)",
      "Insecure Deserialization", "Insufficient Logging & Monitoring",
      "Zero-Day Vulnerability", "Privilege Escalation", "Denial of Service (DoS)"
  );

  @JMockConstructor(descI18nKey = DOC_VULNERABILITY_C1,
      example = "@Vulnerability()",
      exampleValues = {"XML External Entity (XXE)", "Security Misconfiguration"})
  public MVulnerability() {
  }

  @Override
  public String mock() {
    return VULNERABILITY_TYPES.get(random.nextInt(VULNERABILITY_TYPES.size()));
  }
}
