package cloud.xcan.jmock.core.function.basic;

import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_CATEGORY_BASIC;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_C1;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_C2;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_C3;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_C4;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_C5;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_DESC;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_PARAMETER_CHARS;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_PARAMETER_LENGTH;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_PARAMETER_MAX;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_MSTRING_PARAMETER_MIN;
import static cloud.xcan.jmock.api.i18n.JMockFuncDocMessage.DOC_PARAMETER_NULL_WEIGHT;
import static cloud.xcan.jmock.api.i18n.JMockMessage.FPARAM_MAX_T;
import static cloud.xcan.jmock.api.i18n.JMockMessage.FPARAM_MIN_T;
import static cloud.xcan.jmock.api.i18n.JMockMessage.FPARAM_WEIGHT_T;
import static cloud.xcan.jmock.core.support.utils.RandomStringUtils.random;
import static cloud.xcan.jmock.core.support.utils.RandomUtils.nextInt;
import static cloud.xcan.jmock.core.support.utils.StringToTypeUtils.calcNullWeight;
import static cloud.xcan.jmock.core.support.utils.StringToTypeUtils.isNullWeight;

import cloud.xcan.jmock.api.AbstractMockFunction;
import cloud.xcan.jmock.api.docs.annotation.JMockConstructor;
import cloud.xcan.jmock.api.docs.annotation.JMockFunctionRegister;
import cloud.xcan.jmock.api.docs.annotation.JMockParameter;
import cloud.xcan.jmock.api.exception.ParamParseException;
import cloud.xcan.jmock.api.i18n.JMockFuncDocMessage;
import cloud.xcan.jmock.core.support.utils.RandomStringUtils;
import lombok.Getter;
import lombok.Setter;

/**
 * @author XiaoLong Liu
 */
@Setter
@Getter
@JMockFunctionRegister(descI18nKey = DOC_MSTRING_DESC,
    categoryI18nKey = {DOC_CATEGORY_BASIC}, order = 101)
public class MString extends AbstractMockFunction {

  @JMockParameter(descI18nKey = DOC_MSTRING_PARAMETER_LENGTH)
  private Integer length;

  @JMockParameter(descI18nKey = DOC_MSTRING_PARAMETER_MIN)
  private Integer min;

  @JMockParameter(descI18nKey = DOC_MSTRING_PARAMETER_MAX)
  private Integer max;

  @JMockParameter(descI18nKey = DOC_MSTRING_PARAMETER_CHARS)
  private char[] chars;

  @JMockParameter(descI18nKey = DOC_PARAMETER_NULL_WEIGHT)
  private double nullWeight;

  private transient boolean isFixedLength = false;
  private transient boolean isCustomChars = false;
  private transient boolean isAllowNull = false;

  private transient byte mockCase;
  private transient int fixedLength;

  /**
   * Default length
   */
  public final static int DEFAULT_LENGTH = 6;
  /**
   * Maximum length of mstring allowed
   */
  final static int DEFAULT_MAX_LENGTH = Integer.MAX_VALUE;
  /**
   * Maximum number of characters
   */
  final static int DEFAULT_MAX_CHARSET = Integer.MAX_VALUE;
  /**
   * Random number is empty ratio: 1:9
   */
  final static double DEFAULT_NULL_WEIGHT = 0.1;

  @JMockConstructor(descI18nKey = DOC_MSTRING_C1,
      example = "@String()", exampleValues = {"ceja7d"}
  )
  public MString() {
    this(DEFAULT_LENGTH);
  }

  @JMockConstructor(descI18nKey = DOC_MSTRING_C2,
      example = "@String(2)", exampleValues = {"uy", "h8"}
  )
  public MString(Integer length) {
    this(length, 0, 0, null, null);
  }

  @JMockConstructor(descI18nKey = DOC_MSTRING_C3,
      example = "@String(3,\"1:2\")", exampleValues = {"ec2", "null", "c3a"}
  )
  public MString(Integer length, String nullWeight) {
    this(length, 0, 0, null, nullWeight);
  }

  @JMockConstructor(descI18nKey = DOC_MSTRING_C4,
      example = "@String(3,\"1:2\",abcdef123456)", exampleValues = {"ec2", "f36", "c3a"}
  )
  public MString(Integer length, String nullWeight, String chars) {
    this(length, 0, 0, chars, nullWeight);
  }

  @JMockConstructor(descI18nKey = DOC_MSTRING_C5,
      example = "@String(2,6)", exampleValues = {"ht8ut", "cy"}
  )
  public MString(Integer min, Integer max) {
    this(0, min, max, null, null);
  }

  /**
   * Full MockConstructor: @String(length,min,max,chars,nullWeight)
   *
   * <p>
   * When length or max is not specified, a 6-character random mstring is randomly generated by
   * default.
   *
   * @param length     mstring length, default 6, maximum length 2^31-1 characters
   * @param min        the minimum length, if not specified, the default length is 1. If length is
   *                   specified, the current parameter will not take effect
   * @param max        the maximum length, the maximum length is 2^31-1 characters, if length is
   *                   specified, the current parameter will not take effect
   * @param chars      used to generate the constituent elements of the mstring. If not specified,
   *                   the specified length mstring is randomly selected from 52 English letters
   *                   (a-z A-Z) and 10 Arabic numerals (0-9) by default, with a maximum of 2^31-1
   *                   characters
   * @param nullWeight empty ratio, valid when allowNull=true, the default is 1:9, which means that
   *                   10 times are generated and 1 time is empty
   */
  @JMockConstructor(descI18nKey = JMockFuncDocMessage.DOC_MSTRING_C6,
      example = "@String(1,,,ABCDE,\"1:2\")", exampleValues = {"A", "null", "B", "C",
      "null"}
  )
  public MString(Integer length, Integer min, Integer max, String chars, String nullWeight) {
    if (length == null && min == null && max == null) {
      this.length = DEFAULT_LENGTH;
      this.isFixedLength = true;
    } else if (length != null && length > 0) {
      this.length = length;
      this.isFixedLength = true;
    } else {
      if (min == null) {
        this.min = 0;
      } else if (min < 0) {
        ParamParseException.throw0(FPARAM_MIN_T, new Object[]{"min", 0});
      } else {
        this.min = min;
      }
      if (max == null || max <= 0) {
        ParamParseException.throw0(FPARAM_MIN_T, new Object[]{"max", 0});
      }
      if (this.min > max) {
        ParamParseException.throw0(FPARAM_MAX_T, new Object[]{"min", max});
      }
      this.max = max;
      if (max.equals(min)) {
        this.isFixedLength = true;
      }
    }
    if (null != chars && !chars.isEmpty()) {
      this.chars = chars.toCharArray();
      this.isCustomChars = true;
    }
    if (null != nullWeight && !nullWeight.isEmpty()) {
      if (!isNullWeight(nullWeight)) {
        ParamParseException.throw0(FPARAM_WEIGHT_T, new Object[]{"nullWeight"});
      }
      this.isAllowNull = true;
      this.nullWeight = calcNullWeight(nullWeight);
    }
    calcCase();
    if (this.mockCase == 1 || this.mockCase == 4 || this.mockCase == 5 || this.mockCase == 8) {
      this.fixedLength = calcFixedLength();
    }
  }

  /**
   * {@link RandomStringUtils#random(int, char[], double)}
   */
  @Override
  public String mock() {
    switch (mockCase) {
      case 1:
        return random(this.fixedLength);
      case 2:
        return random(nextInt(this.min, this.max), this.chars);
      case 3:
        return random(nextInt(this.min, this.max), this.nullWeight);
      case 4:
        return random(this.fixedLength, this.chars);
      case 5:
        return random(this.fixedLength, this.nullWeight);
      case 6:
        return random(nextInt(this.min, this.max), this.chars, this.nullWeight);
      case 7:
        return random(nextInt(this.min, this.max));
      case 8:
        return random(this.fixedLength, this.chars, this.nullWeight);
      default:
        throw new IllegalStateException("Unexpected mock case value: " + mockCase);
    }
  }

  private void calcCase() {
    if (this.isFixedLength && !this.isCustomChars && !this.isAllowNull) {
      this.mockCase = 1;
    } else if (!this.isFixedLength && this.isCustomChars && !this.isAllowNull) {
      this.mockCase = 2;
    } else if (!this.isFixedLength && !this.isCustomChars && this.isAllowNull) {
      this.mockCase = 3;
    } else if (this.isFixedLength && this.isCustomChars && !this.isAllowNull) {
      this.mockCase = 4;
    } else if (this.isFixedLength && !this.isCustomChars && this.isAllowNull) {
      this.mockCase = 5;
    } else if (!this.isFixedLength && this.isCustomChars && this.isAllowNull) {
      this.mockCase = 6;
    } else if (!this.isFixedLength && !this.isCustomChars && !this.isAllowNull) {
      this.mockCase = 7;
    } else if (this.isFixedLength && this.isCustomChars && this.isAllowNull) {
      this.mockCase = 8;
    }
  }

  private int calcFixedLength() {
    if (this.length != null && this.length > 0) {
      return this.length;
    } else if (this.min.equals(this.max)) {
      return this.max;
    }
    return 0;
  }

}
